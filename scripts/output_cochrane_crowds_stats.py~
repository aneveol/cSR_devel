
from common.Data import DataStream

import sys

import lxml.html
from lxml.cssselect import CSSSelector

import glob

records = {}

filenames = glob.glob('data/raw/cochrane_crowd/*.xml')
for filename in filenames:
    print "Reading file '%s'" % filename

    tree = lxml.html.fromstring(open(filename).read())
    
    i = 0
    record_tags = CSSSelector('record')(tree)
    for record in record_tags:
        i += 1
        sys.stdout.write("\r%s\r" % ' '*40)
        sys.stdout.write("Reading %i records (%i%%)" % (i, int(round(100*i/len(record_tags)))))
        
        ids = CSSSelector('embaseid')(record)
        if len(ids) == 0:
            id = None
        elif len(ids) == 1:
            id = ids[0].text_content()
        else:
            raise ValueError("Record had %i EmbaseIDs" % len(ids))
#        labels = CSSSelector('decision:not(assessment)')(record)
        labels = record.xpath('decision')
        if len(labels) == 0:
            label = None
        elif len(labels) == 1:
            label = labels[0].text_content()
        else:
            raise ValueError("Record had %i Decisions" % len(labels))
        if not label in records:
            records[label] = []
        records[label].append(id)
        
    print
    print "Done"

data = DataStream('PMID', 'source', 'label')

for label in records.keys():
    print "%s:" % label
    
    ids = records[label]
    n = len(ids)
    # Assume PMID 8 digits, Embase accession number 10 digits
    PMIDs   = [id for id in ids if id and len(id) == 8]
    EMIDs   = [id for id in ids if id and len(id) == 10]
    n_blank = len([id for id in ids if not id])
    print "  PubMed:  %i" % len(PMIDs)
    print "  Embase:  %i" % len(EMIDs)
    print "  Blank:   %i" % n_blank
    print "  Unknown: %i" % (len(ids) - n_blank - len(PMIDs) - len(EMIDs))
    print "  Total:   %i" % len(ids)
    
    if label in ['Reject', 'DTA', 'RCT or CCT']:
        for PMID in PMIDs:
            data.append([PMID, 'cochrane_crowd_20171025', label])

with open('data/pmid/cochrane_crowd_20171025', 'w') as out:
    out.write(data.marshall())
